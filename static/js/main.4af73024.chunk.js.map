{"version":3,"sources":["components/Profile/Dialogs/Dialogs.module.css","components/Profile/Dialogs/DialogsItem/DialogsItem.module.css","components/Users/user.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Myposts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/Dialogs/MessageProps/MessageProps.module.css","components/Profile/Myposts/Posts/Post.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/Profile/Music/Music.tsx","components/Profile/Settings/Settings.tsx","components/Profile/News/News.tsx","components/Profile/Dialogs/DialogsItem/DialogsItem.tsx","components/Profile/Dialogs/MessageProps/MessageProps.tsx","components/Profile/Dialogs/Dialogs.tsx","Redux/ProfileReducer.tsx","Redux/DialogsReducer.tsx","components/Profile/Dialogs/DialogsContaner.tsx","Redux/State.tsx","Redux/UsersReducer.tsx","assets/images/thumb-1920-288376.jpg","API/API-TS.tsx","components/Users/UsersJSX.tsx","assets/images/Ajux_loader.gif","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/SuperDialogsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","Redux/authReducer.tsx","components/Header/HeaderContainer.tsx","App.tsx","Redux/Redux-Store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","classes","nav","item","to","activeClassName","active","Music","Settings","News","DialogsItem","props","s","dialog","id","name","MessageProps","messages","message","Dialogs","dialogsElement","dialogs","map","d","messegesElement","m","dialogsItem","value","newMessageBody","onChange","e","onNewMessageChange","currentTarget","placeholder","onClick","onSendMessageClick","initializationState","postData","newPostText","profile","ProfileReducer","state","action","type","newPost","concat","DialogsReducer","body","DialogsContaner","connect","dialogsPage","dispatch","text","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","following","UsersReducer","u","userId","followed","totalCount","filter","instance","axios","create","baseURL","withCredentials","headers","globalAPI","get","responce","data","delete","post","UsersJSX","pageCount","Math","ceil","pages","i","push","p","selectPage","onPageChanged","src","photos","small","userPhoto","photo","disabled","some","toggleFollowProgress","resultCode","unfollow","follow","status","Preloader","Loader","UsersAPI","setCurrentPage","toggleIsFetching","setUsers","items","this","setTotalUsersCount","React","Component","usersPage","followAC","unfollowAC","setUsersAC","currentPageAC","setUsersTotalCounterAC","toggleIsFetchingAC","ProfileInfo","content","descriptionBlock","large","aboutMe","contacts","vk","github","facebook","lookingForAJobDescription","Post","MyPosts","postElements","description","ev","onPostChange","addPost","posts","SuperDialogsContainer","profilePage","postText","addPostAC","Profile","ProfileContainer","match","params","response","setUserProfile","WithUrlDataComponent","withRouter","Header","header","alt","loginBlock","isAuth","login","email","authReducer","HeaderContainer","setUsersDataAC","auth","App","path","render","UsersContainer","reducers","combineReducers","store","createStore","window","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af73024.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__aWGc7\",\"dialogsItem\":\"Dialogs_dialogsItem__2C64W\",\"dialog\":\"Dialogs_dialog__2SMSH\",\"active\":\"Dialogs_active__2X8bm\",\"messages\":\"Dialogs_messages__1ApwO\",\"message\":\"Dialogs_message__CoR4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsItem_dialogs__pT4z6\",\"dialogsItem\":\"DialogsItem_dialogsItem__2aiWJ\",\"dialog\":\"DialogsItem_dialog__18Wbv\",\"active\":\"DialogsItem_active__2Xg_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"user_photo__2D30i\",\"selectPage\":\"user_selectPage__QxaI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3pp0s\",\"content\":\"ProfileInfo_content__3WTdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"MyPosts_description__1Jci8\",\"posts\":\"MyPosts_posts__o6qY_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__19HPs\",\"loginBlock\":\"Header_loginBlock__3eJy1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessageProps_messages__jvlcp\",\"message\":\"MessageProps_message__1symC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__il7ql\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__kppyN\",\"item\":\"Navbar_item__Oh2EQ\",\"active\":\"Navbar_active__2iIrX\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './Navbar.module.css';\r\n\r\n// let classes = {\r\n//     'nav': 'Navbar_nav__3--CE',\r\n//     'item': 'Navbar_item__3QZOK'\r\n// }\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/messages\" activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst Music = () =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst Settings = () =>{\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst News = () =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './DialogsItem.module.css'\r\n\r\n\r\nexport type DialogsItemProps ={\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = (props: DialogsItemProps) => {\r\n    return (\r\n\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/messages/\" + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport s from './MessageProps.module.css'\r\n\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst MessageProps = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageProps;","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport MessageProps from \"./MessageProps/MessageProps\";\r\nimport {sendMessageAC, StoreType, updateNewMessageBodyAC} from \"../../../Redux/State\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    messages: Array<MessageType>\r\n     dialogs: Array<DialogsType>\r\n    // store: StoreType\r\n    // messegesElement: any\r\n    newMessageBody: string\r\n    onSendMessageClick: (text: string)=> void\r\n    onNewMessageChange: (e: any)=> void\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) =>{\r\n\r\n    let dialogsElement = props.dialogs.map(d => <DialogsItem name={d.name} id={d.id}/>)\r\n\r\n    let messegesElement = props.messages.map(m => <MessageProps message={m.message}/>)\r\n\r\n    function handlerChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n\r\n    function handlerClick() {\r\n        props.onSendMessageClick(props.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messegesElement}</div>\r\n                <div>\r\n                    <div><textarea value={props.newMessageBody}\r\n                                   onChange={handlerChange}\r\n                                   placeholder={\"Введите текст\"}/></div>\r\n                    <div><button onClick={handlerClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {ActionsType, PostDataType, ProfilePageType} from \"./State\";\r\n\r\nexport type profileType = {\r\n    aboutMe: string\r\n    contacts: profileContactsType\r\n    lookingForAJobDescription: string\r\n    photos: photosType\r\n}\r\n\r\ntype photosType ={\r\n    small: string\r\n    large: string\r\n}\r\n\r\ntype profileContactsType = {\r\n    facebook: string\r\n    vk: string\r\n    github: string\r\n\r\n}\r\n\r\nexport type setUserProfileType = {\r\n    type: 'SET_USERS_PROFILE',\r\n    profile: profileType\r\n}\r\n\r\nlet initializationState = {\r\n    postData: [\r\n        {id: 1, message: \"Hi, how are you?\", value: 10},\r\n        {id: 2, message: \"It's my first post\", value: 8},\r\n        {id: 3, message: \"Yo it-incubator\", value: 10},\r\n        {id: 4, message: \"Yo\", value: 17},\r\n    ],\r\n    newPostText: '',\r\n    profile: null\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initializationState, action: ActionsType): ProfilePageType => {\r\n   switch (action.type) {\r\n       case 'ADD-POST': {\r\n           let newPost: PostDataType  = {\r\n               id: 5,\r\n               message: state.newPostText,\r\n               value: 0\r\n           }\r\n           return {\r\n               ...state,\r\n               postData: state.postData.concat(newPost),\r\n               newPostText: ''\r\n           }\r\n       }\r\n       case 'UPDATE-NEW-POST-TEXT': {\r\n           return {\r\n               ...state,\r\n               newPostText: action.newPostText\r\n           }\r\n       }\r\n       case 'SET_USERS_PROFILE': {\r\n           return {\r\n               ...state,\r\n               profile: action.profile\r\n           }\r\n       }\r\n       default:\r\n           return state\r\n   }\r\n}\r\nexport const setUserProfile = (profile: profileType): setUserProfileType => ({type: 'SET_USERS_PROFILE', profile: profile})\r\n\r\n\r\nexport {ProfileReducer}\r\n\r\n/* if (action.type === 'ADD-POST') {\r\n        let newPost: PostDataType = {\r\n            id: 5,\r\n            message: action.postText,\r\n            value: 0\r\n        }\r\n        return {\r\n            ...state,\r\n            postData: state.postData.concat(newPost),\r\n            newPostText: ''\r\n        }\r\n\r\n    } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n        return {\r\n            ...state,\r\n            newPostText: action.newPostText,\r\n\r\n        }\r\n        //this._state.profilePage.newPostText = action.newPostText\r\n        //this._rerenderEntireTree(this._state);\r\n    }return state*/","import {ActionsType, DialogsPageType} from \"./State\";\r\n\r\nlet initializationState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Alex'},\r\n        {id: 2, name: 'Olga'},\r\n        {id: 3, name: 'Dima'},\r\n        {id: 4, name: 'Sveta'},\r\n    ],\r\n        messages: [\r\n    {id: 1, message: 'Hi'},\r\n    {id: 2, message: 'How are you'},\r\n    {id: 3, message: 'It-incubator'},\r\n    {id: 4, message: 'it-kamasutra'},\r\n],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const DialogsReducer = (state: DialogsPageType = initializationState, action: ActionsType): DialogsPageType => {\r\n    if (action.type === 'UPDATE-NEW-MESSAGE-BODY') {\r\n        //this._state.dialogsPage.newMessageBody = action.body\r\n       // this._rerenderEntireTree(this._state);\r\n\r\n        return {\r\n            ...state,\r\n            newMessageBody: action.body,\r\n        }\r\n    } else if (action.type === 'SEND-MESSAGE') {\r\n        return {\r\n            ...state,\r\n            messages: state.messages.concat({id: 5, message: state.newMessageBody}),\r\n            newMessageBody: ''\r\n        }\r\n        //let body = this._state.dialogsPage.newMessageBody\r\n        //this._state.dialogsPage.newMessageBody = ''\r\n       // this._state.dialogsPage.messages.push({id: 5, message: body})\r\n        //this._rerenderEntireTree(this._state);\r\n    }\r\n\r\n\r\n    return state\r\n}","import React from \"react\";\r\nimport Dialogs, {DialogsType, MessageType} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendMessageAC, StateType, updateNewMessageBodyAC} from \"../../../Redux/State\";\r\nimport {AppRootStateType} from \"../../../Redux/Redux-Store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n/*const DialogsContaner = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElement = props.dialogs.map(d => <DialogsItem name={d.name} id={d.id}/>)\r\n\r\n    let messegesElement = props.messages.map(m => <MessageProps message={m.message}/>)\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageAC())\r\n    }\r\n    let onNewMessageChange = (e: any) => {\r\n        let body = e.target.value\r\n        props.store.dispatch(updateNewMessageBodyAC(body))\r\n    }\r\n\r\n    return (\r\n        <Dialogs\r\n\r\n            messages={props.messages}\r\n            dialogs={props.dialogs}\r\n            store={props.store}\r\n            dialogsElement={dialogsElement}\r\n            messegesElement={messegesElement}\r\n            newMessageBody={newMessageBody}\r\n            onSendMessageClick={onSendMessageClick}\r\n            onNewMessageChange={onNewMessageChange}\r\n\r\n        />\r\n    )\r\n}*/\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MSTType => {\r\n    return {\r\n        newMessageBody: state.dialogsPage.newMessageBody,\r\n        messages: state.dialogsPage.messages,\r\n        dialogs: state.dialogsPage.dialogs,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MDTType => {\r\n    return {\r\n        onNewMessageChange: (value) => {\r\n            dispatch(updateNewMessageBodyAC(value))\r\n        },\r\n        onSendMessageClick: (text: string) => {\r\n            dispatch(sendMessageAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContaner = connect<MSTType, MDTType, {}, AppRootStateType>(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\n\r\nexport default DialogsContaner;\r\n\r\ntype MSTType = {\r\n    newMessageBody: string\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogsType>\r\n}\r\ntype MDTType = {\r\n    onNewMessageChange: (e: any) => void\r\n    onSendMessageClick: (text: string) => void\r\n}\r\n","import {ProfileReducer, setUserProfileType} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport {\r\n    currentPageACType,\r\n    followACType, followingProgressType,\r\n    setUsersACType,\r\n    setUsersTotalCounterACType, toggleIsFetchingACType,\r\n    unfollowACType\r\n} from \"./UsersReducer\";\r\nimport {setUsersDataType} from \"./authReducer\";\r\n\r\nexport type MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\nexport type PostDataType = {\r\n    id: number\r\n    message: string\r\n    value: number\r\n}\r\nexport type ProfilePageType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n    profile: any\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nexport type StateType = {\r\n    dialogsPage: DialogsPageType\r\n    profilePage: ProfilePageType\r\n\r\n}\r\n\r\nexport type ActionsType =\r\n    AddPostActiveType\r\n    | UpdatePostType\r\n    | UpdateMessageType\r\n    | SendMessageType\r\n    | followACType\r\n    | unfollowACType\r\n    | setUsersACType\r\n    | currentPageACType\r\n    | setUsersTotalCounterACType\r\n    | toggleIsFetchingACType\r\n    | setUserProfileType\r\n    | setUsersDataType\r\n    | followingProgressType\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    subscribe: (callback: (state: StateType) => void) => void\r\n    _rerenderEntireTree: (state: StateType) => void\r\n    getState: () => StateType\r\n    dispatch: (action: ActionsType) => void\r\n}\r\nexport type AddPostActiveType = {\r\n    type: 'ADD-POST'\r\n    postText: string\r\n}\r\n\r\nexport type UpdatePostType = {\r\n    type: 'UPDATE-NEW-POST-TEXT'\r\n    newPostText: string\r\n}\r\n\r\nexport type UpdateMessageType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\n\r\nexport type SendMessageType = {\r\n    type: \"SEND-MESSAGE\"\r\n    value: string\r\n\r\n}\r\n\r\nexport const store: any = {\r\n    _state: {\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {id: 1, name: 'Alex'},\r\n                {id: 2, name: 'Olga'},\r\n                {id: 3, name: 'Dima'},\r\n                {id: 4, name: 'Sveta'},\r\n            ],\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'How are you'},\r\n                {id: 3, message: 'It-incubator'},\r\n                {id: 4, message: 'it-kamasutra'},\r\n            ],\r\n            newMessageBody: ''\r\n        },\r\n        profilePage: {\r\n\r\n            postData: [\r\n                {id: 1, message: \"Hi, how are you?\", value: 10},\r\n                {id: 2, message: \"It's my first post\", value: 8},\r\n                {id: 3, message: \"Yo it-incubator\", value: 10},\r\n                {id: 4, message: \"Yo\", value: 17},\r\n            ],\r\n            newPostText: ''\r\n\r\n        }\r\n    },\r\n    subscribe(callback: (state: StateType) => void) {\r\n        this._rerenderEntireTree = callback\r\n    },\r\n    _rerenderEntireTree(_state: StateType) {\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    dispatch(action: any) {\r\n        console.log('dispatc', this, action)\r\n        // if (action.type === 'ADD-POST') {\r\n        //     let newPost: PostDataType = {\r\n        //         id: 5,\r\n        //         message: action.postText,\r\n        //         value: 0\r\n        //     }\r\n        //     this._state.profilePage.postData.push(newPost)\r\n        //     this._rerenderEntireTree(this._state);\r\n        // } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n        //     this._state.profilePage.newPostText = action.newPostText\r\n        //     this._rerenderEntireTree(this._state);\r\n        // } else\r\n        this._state.profilePage = ProfileReducer(this._state.profilePage, action)\r\n        /*     if (action.type === 'UPDATE-NEW-MESSAGE-BODY') {\r\n             this._state.dialogsPage.newMessageBody = action.body\r\n             this._rerenderEntireTree(this._state);\r\n         } else if (action.type === 'SEND-MESSAGE') {\r\n             let body = this._state.dialogsPage.newMessageBody\r\n             this._state.dialogsPage.newMessageBody = ''\r\n             this._state.dialogsPage.messages.push({id: 5, message: body})\r\n             this._rerenderEntireTree(this._state);\r\n         }*/\r\n        this._state.dialogsPage = DialogsReducer(this._state.dialogsPage, action)\r\n        this._rerenderEntireTree(this._state);\r\n    }\r\n}\r\nexport const addPostAC = (postText: string): AddPostActiveType => {\r\n    return {\r\n        type: \"ADD-POST\",\r\n        postText: postText\r\n    }\r\n}\r\nexport const onPostChangeAC = (newPostText: string): UpdatePostType => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST-TEXT',\r\n        newPostText: newPostText\r\n    }\r\n}\r\nexport const sendMessageAC = (value: string): SendMessageType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        value: value\r\n    }\r\n}\r\nexport const updateNewMessageBodyAC = (text: string): UpdateMessageType => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE-BODY',\r\n        body: text\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {ActionsType} from \"./State\";\r\n\r\ntype LocalType = {\r\n    city: string,\r\n    country: string\r\n}\r\n\r\ntype PhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nexport type UserType={\r\n    id: number,\r\n    followed: boolean\r\n    photos: PhotoType\r\n    name: string,\r\n    status: string\r\n    photoUrl: string,\r\n    location: LocalType\r\n}\r\nexport type ISType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    following: Array<number>\r\n}\r\nexport type followingProgressType = {\r\n    type: 'TOGGLE_IS_FOLLOWED',\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n\r\n}\r\nexport type setUsersTotalCounterACType = {\r\n    type: 'SET_TOTAL_USERS_COUNT'\r\n    totalCount: number\r\n}\r\nexport type followACType = {\r\n    type: 'FOLLOW',\r\n    userId: number\r\n}\r\nexport type unfollowACType = {\r\n    type: 'UNFOLLOW',\r\n    userId: number\r\n}\r\nexport type setUsersACType = {\r\n    type: 'SET_USERS',\r\n    users: any\r\n}\r\nexport type currentPageACType = {\r\n    type: 'SET_CURRENT_PAGE',\r\n    currentPage: number\r\n}\r\n\r\n\r\n\r\nlet initialState:ISType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    following: []\r\n}\r\n\r\nconst UsersReducer = (state:ISType = initialState, action: ActionsType):ISType => {\r\n    switch (action.type) {\r\n    case 'FOLLOW':{\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n\r\n    case 'UNFOLLOW':{\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case 'SET_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n\r\n        case 'SET_TOTAL_USERS_COUNT': {\r\n            return  {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_IS_FOLLOWED': {\r\n            return {\r\n                ...state,\r\n                following: action.isFetching\r\n                    ? [...state.following,  action.userId]\r\n                    : state.following.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleFollowProgress = (isFetching: boolean, userId: number): followingProgressType => ({type: 'TOGGLE_IS_FOLLOWED', isFetching, userId})\r\nexport const followAC = (userId: number): followACType => ({type: 'FOLLOW', userId})\r\nexport const unfollowAC = (userId: number):unfollowACType => ({type: 'UNFOLLOW', userId})\r\nexport const setUsersAC = (users: any): setUsersACType => ({type: 'SET_USERS', users})\r\nexport const currentPageAC = (currentPage: number): currentPageACType => ({type: 'SET_CURRENT_PAGE', currentPage})\r\nexport const setUsersTotalCounterAC = (totalCount: number): setUsersTotalCounterACType => ({type: 'SET_TOTAL_USERS_COUNT', totalCount})\r\nexport const toggleIsFetchingAC = (isFetching: boolean): toggleIsFetchingACType => ({type: 'TOGGLE_IS_FETCHING', isFetching})\r\n\r\n\r\n\r\nexport default UsersReducer\r\n\r\n","export default __webpack_public_path__ + \"static/media/thumb-1920-288376.d05ae746.jpg\";","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"d7fc70fd-6aec-456b-80d7-34c2364c0cf6\"\r\n    }\r\n})\r\n\r\nexport const globalAPI = {\r\n    getUsers (currentPage: number, pageSize: number)  {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => {\r\n                return responce.data\r\n            })\r\n    },\r\n    getAutMe () {\r\n        return instance.get(`auth/me`)\r\n            .then(responce => {\r\n                return responce.data\r\n            })\r\n    },\r\n    getUnfollow (id: number)  {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(responce => {\r\n                return responce.data\r\n            })\r\n    },\r\n    detFollow  (id: number) {\r\n        return   instance.post(`follow/${id}`, {},)\r\n            .then(responce => {\r\n                return responce.data\r\n            })\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./user.module.css\";\r\nimport userPhoto from \"../../assets/images/thumb-1920-288376.jpg\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {globalAPI} from \"../../API/API-TS\";\r\n\r\ntype UsersTSXprops = {\r\n    users: UserType[]\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    onPageChanged: (currentPage: number) => void\r\n    toggleFollowProgress: (isFetching: boolean, userId: number) => void\r\n    following: Array<number>\r\n}\r\n\r\nconst UsersJSX = (props: UsersTSXprops) => {\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? s.selectPage : ''}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'./profile/' + u.id}>\r\n                             <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.photo}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.following.some(id => id === u.id)}  onClick={() => {\r\n\r\n                                props.toggleFollowProgress(true, u.id)\r\n                                globalAPI.getUnfollow(u.id).then(data => {\r\n                                   if (data.resultCode === 0) {\r\n                                       props.unfollow(u.id)\r\n                                   }\r\n                                    props.toggleFollowProgress(false, u.id)\r\n                                })\r\n\r\n\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={props.following.some(id => id === u.id)} onClick={() => {\r\n\r\n                                props.toggleFollowProgress(true, u.id)\r\n                                globalAPI.detFollow(u.id).then(data=> {\r\n                                    if (data.resultCode === 0) {\r\n                                        props.follow(u.id)\r\n                                    }\r\n                                    props.toggleFollowProgress(false, u.id)\r\n                                })\r\n\r\n                            }}>Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                         <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default UsersJSX","export default __webpack_public_path__ + \"static/media/Ajux_loader.6281c6f4.gif\";","import React from \"react\";\r\nimport Loader from '../../../assets/images/Ajux_loader.gif'\r\n\r\nlet Preloader = () => {\r\n    return  (\r\n        <img src={Loader} />\r\n    )\r\n}\r\n\r\nexport default Preloader","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/Redux-Store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    currentPageAC,\r\n    followAC,\r\n    setUsersAC,\r\n    setUsersTotalCounterAC, toggleFollowProgress, toggleIsFetchingAC,\r\n    unfollowAC,\r\n    UserType\r\n} from \"../../Redux/UsersReducer\";\r\nimport UsersJSX from \"./UsersJSX\";\r\n\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {globalAPI} from \"../../API/API-TS\";\r\n\r\n\r\ntype UsersType = {\r\n    users: UserType[]\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowProgress: (isFetching: boolean, userId: number) => void\r\n    following: Array<number>\r\n\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    users: UserType[]\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\n\r\nclass UsersAPI extends React.Component<UsersType> {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        globalAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data=> {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n            this.props.setTotalUsersCount(data.totalCount)\r\n        })\r\n    }\r\n\r\n    onPageChanged = (currentPage: number) => {\r\n        this.props.setCurrentPage(currentPage)\r\n        this.props.toggleIsFetching(true)\r\n        globalAPI.getUsers(currentPage, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <UsersJSX\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                users={this.props.users}\r\n                currentPage={this.props.currentPage}\r\n                pageSize={this.props.pageSize}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                onPageChanged={this.onPageChanged}\r\n                toggleFollowProgress={this.props.toggleFollowProgress}\r\n                following={this.props.following}\r\n                /*isFetching={this.props.isFetching}*/\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        following: state.usersPage.following\r\n\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers: (users: any) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(currentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(setUsersTotalCounterAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        },\r\n        toggleFollowProgress: (following: boolean, userId: number) => {\r\n            dispatch(toggleFollowProgress(following, userId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersAPI)\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {profileType} from \"../../../Redux/ProfileReducer\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: profileType\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.content}>\r\n                <img\r\n                    src=\"https://cdn.shazoo.ru/c800x360/258912_Jv7rCOP3Rs_kratos_3_wallpaper_1600x900.jpg\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.contacts.vk}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React, {FC} from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\nexport type propsPost = {\r\n    message: string\r\n    value: number\r\n}\r\n\r\nconst Post:FC<propsPost> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://psn100.net/img/avatar/2e48ef2b3fde68e5e8b24e1c7c7ca1ca.png\"/>\r\n            <div>{props.message}</div>\r\n            <div>\r\n            <span>like {props.value}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {AddPostActiveType, UpdatePostType} from \"../../../Redux/State\";\r\nimport Post from \"./Posts/Post\";\r\n\r\nexport type typeMyPostProps = {\r\n    postData: Array<typePostData>\r\n    newPostText: string\r\n    onPostChange: (postText: string) => void\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type typePostData = {\r\n    id: number\r\n    message: string\r\n    value: number\r\n\r\n}\r\n\r\n\r\n\r\nconst MyPosts = (props: typeMyPostProps) => {\r\n\r\n    let postElements: Array<JSX.Element> = props.postData.map(p => <Post message={p.message} value={p.value}/>)\r\n\r\n    function handleChange(ev: ChangeEvent<HTMLTextAreaElement>) {\r\n        props.onPostChange(ev.currentTarget.value)\r\n    }\r\n\r\n    function handleClick() {\r\n        props.addPost(props.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.description}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <div>\r\n                <textarea onChange={handleChange}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={handleClick}>Add post</button>\r\n            </div>\r\n            <div className={s.posts}>\r\n                <h3>New post</h3>\r\n            </div>\r\n            {postElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport {addPostAC, AddPostActiveType, onPostChangeAC, UpdatePostType} from \"../../../Redux/State\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./Posts/Post\";\r\n\r\nexport type typeMyPostProps = {\r\n    postData: Array<typePostData>\r\n    newPostText: string\r\n    dispatch: (action: AddPostActiveType | UpdatePostType) => void\r\n    /* addPost: (m: string) => void*/\r\n    /*updateNewPostText: (newPostText: string) => void*/\r\n}\r\n\r\nexport type typePostData = {\r\n    id: number\r\n    message: string\r\n    value: number\r\n\r\n}\r\n\r\n\r\n/*\r\nconst MyPostsContainer = () => {\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        {(store ):  ReactNode =>  {\r\n            let postElements: Array<JSX.Element> =\r\n                store!.getState().profilePage.postData.map(p => <Post message={p.message} value={p.value}/>)\r\n\r\n            let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n            let addPost = () => {\r\n                //let text = newPostElement.current ? newPostElement.current.value : '----'\r\n                //let text = newPostElement.current.value\r\n                if (newPostElement.current) {\r\n                    store!.dispatch(addPostAC(newPostElement.current.value))\r\n                    store!.dispatch(onPostChangeAC(''))\r\n                }\r\n            }\r\n\r\n            let onPostChange = () => {\r\n                //let text = newPostElement.current ? newPostElement.current.value : '----'\r\n                if (newPostElement.current) {\r\n                    store!.dispatch(onPostChangeAC(newPostElement.current.value))\r\n                }\r\n            }\r\n        return  <MyPosts\r\n                postElements={postElements}\r\n                newPostElement={newPostElement}\r\n                addPost={addPost}\r\n                onPostChange={onPostChange}\r\n                postData={store!.getState().profilePage.postData}\r\n                newPostText={store!.getState().profilePage.newPostText}\r\n                dispatch={store!.dispatch}/>\r\n        }\r\n    }</StoreContext.Consumer>\r\n\r\n}\r\n\r\n\r\n</StoreContext.Consumer>\r\n\r\n\r\nexport default MyPostsContainer;\r\n*/\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (postText: string) => {  dispatch(addPostAC(postText))},\r\n        onPostChange: (postText: string) => { dispatch(onPostChangeAC(postText))}\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconst SuperDialogsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default  SuperDialogsContainer\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport SuperDialogsContainer from \"./Myposts/SuperDialogsContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: any\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <SuperDialogsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/Redux-Store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileType, setUserProfile} from \"../../Redux/ProfileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = mapStateType & mapDispatchPropsType\r\n\r\ntype ProfilePropsType = RouteComponentProps<PasParamType> & PropsType\r\n\r\ntype mapDispatchPropsType = {\r\n    setUserProfile: (profile: profileType) => void\r\n}\r\ntype mapStateType = {\r\n    profile: profileType\r\n}\r\n\r\ntype PasParamType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType>{\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '2'\r\n        }\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId).then(response => {\r\n            this.props.setUserProfile(response.data)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStateType => {\r\n    return {\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        setUserProfile: (profile: profileType) => {\r\n            dispatch(setUserProfile(profile))\r\n        },\r\n    }\r\n\r\n}\r\n\r\nlet WithUrlDataComponent = withRouter(ProfileContainer)\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (WithUrlDataComponent);","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://wallpaperforu.com/wp-content/uploads/2020/08/vector-wallpaper-200827150908131024x768.jpg\" alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? props.login :  <NavLink to={'/login'} >Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {ActionsType} from \"./State\";\r\n\r\ntype LocalType = {\r\n    city: string,\r\n    country: string\r\n}\r\n\r\ntype PhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nexport type UserType = {\r\n    /*   id: number,\r\n       followed: boolean\r\n       photos: PhotoType\r\n       name: string,\r\n       status: string\r\n       photoUrl: string,\r\n       location: LocalType*/\r\n}\r\nexport type setUsersDataType = {\r\n    type: 'SET_USERS_DATA'\r\n    data: dataType\r\n}\r\n\r\nexport type dataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\nexport type ISType = {\r\n    data: dataType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nlet initialState: ISType = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n    },\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state: ISType = initialState, action: ActionsType): ISType => {\r\n    switch (action.type) {\r\n        case 'SET_USERS_DATA': {\r\n            return {\r\n                ...state,\r\n                 data: {...action.data},\r\n                isAuth: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUsersDataAC = (data: dataType): setUsersDataType => ({type: 'SET_USERS_DATA', data})\r\n\r\nexport default authReducer\r\n\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/Redux-Store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {dataType, setUsersDataAC} from \"../../Redux/authReducer\";\r\nimport {globalAPI} from \"../../API/API-TS\";\r\n\r\ntype HeaderProps = {\r\n    setUsersDataAC: (data: dataType) => void\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderProps> {\r\n    componentDidMount() {\r\n        globalAPI.getAutMe().then(data => {\r\n\r\n            if (data.resultCode === 0) {\r\n                this.props.setUsersDataAC(data.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.data.login\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        setUsersDataAC: (data: dataType) => {\r\n            dispatch(setUsersDataAC(data))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (HeaderContainer);","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Music from \"./components/Profile/Music/Music\";\nimport Settings from \"./components/Profile/Settings/Settings\";\nimport News from \"./components/Profile/News/News\";\nimport DialogsContaner from \"./components/Profile/Dialogs/DialogsContaner\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\n\n\ntype AppPropsType = {\n /*   state: StateType\n    dispatch: (action: AddPostActiveType | UpdatePostType | UpdateMessageType | SendMessageType) => void\n    store: StoreType*/\n\n    /*   addPost: (m: string) => void\n       updateNewPostText: (newPostText: string) => void*/\n}\n\n\nfunction App(props: AppPropsType) {\n   /* let posts = props.state.profilePage.postData\n    let dialogs = props.state.dialogsPage.dialogs\n    let messages = props.state.dialogsPage.messages\n    let profilePage = props.state.profilePage.newPostText*/\n\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n\n                    <Route path=\"/profile/:userId?\"\n                           render={() => <ProfileContainer/>}/>\n                    <Route path=\"/messages\"\n                           render={() => <DialogsContaner/>}/>\n                    <Route path=\"/users\"\n                           render={() => <UsersContainer/>}/>\n                    <Route path=\"/music\"\n                           render={() => <Music/>}/>\n                    <Route path=\"/settings\"\n                           render={() => <Settings/>}/>\n                    <Route path=\"/news\"\n                           render={() => <News/>}/>\n\n                </div>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {DialogsReducer} from \"./DialogsReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    dialogsPage: DialogsReducer,\r\n    usersPage: UsersReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof store.getState>\r\n\r\n\r\nexport const store =createStore(reducers)\r\n\r\n// @ts-ignore\r\nwindow.store =store","import reportWebVitals from './reportWebVitals';\nimport React from \"react\";\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/Redux-Store\";\n\n\nexport let rerenderEntireTree = () =>{\n\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store}>\n                    <App/>\n                </Provider>\n\n            </BrowserRouter>\n\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\nrerenderEntireTree()\n\n// store.subscribe(rerenderEntireTree)\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}