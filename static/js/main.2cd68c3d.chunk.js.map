{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/Dialogs/Dialogs.module.css","components/Profile/Dialogs/DialogsItem/DialogsItem.module.css","components/Profile/Myposts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/Myposts/Posts/Post.module.css","components/Profile/Dialogs/MessageProps/MessageProps.module.css","reportWebVitals.ts","Redux/State.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/Dialogs/DialogsItem/DialogsItem.tsx","components/Profile/Dialogs/MessageProps/MessageProps.tsx","components/Profile/Dialogs/Dialogs.tsx","components/Profile/Music/Music.tsx","components/Profile/Settings/Settings.tsx","components/Profile/News/News.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","_state","dialogsPage","dialogs","id","name","messages","message","newMessageBody","profilePage","postData","value","newPostText","subscribe","callback","this","_rerenderEntireTree","console","log","getState","dispatch","action","type","newPost","postText","push","body","onPostChangeAC","Header","className","s","header","src","alt","Navbar","classes","nav","item","to","activeClassName","active","Post","props","MyPosts","postElements","map","p","newPostElement","React","createRef","description","onChange","current","ref","onClick","posts","ProfileInfo","content","descriptionBlock","Profile","bind","DialogsItem","dialog","MessageProps","Dialogs","state","dialogsElement","d","messegesElement","m","dialogsItem","e","target","placeholder","Music","Settings","News","App","path","render","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cd68c3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__kppyN\",\"item\":\"Navbar_item__Oh2EQ\",\"active\":\"Navbar_active__2iIrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__aWGc7\",\"dialogsItem\":\"Dialogs_dialogsItem__2C64W\",\"dialog\":\"Dialogs_dialog__2SMSH\",\"active\":\"Dialogs_active__2X8bm\",\"messages\":\"Dialogs_messages__1ApwO\",\"message\":\"Dialogs_message__CoR4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsItem_dialogs__pT4z6\",\"dialogsItem\":\"DialogsItem_dialogsItem__2aiWJ\",\"dialog\":\"DialogsItem_dialog__18Wbv\",\"active\":\"DialogsItem_active__2Xg_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"MyPosts_description__1Jci8\",\"posts\":\"MyPosts_posts__o6qY_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3pp0s\",\"content\":\"ProfileInfo_content__3WTdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__19HPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__il7ql\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessageProps_messages__jvlcp\",\"message\":\"MessageProps_message__1symC\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\nexport type PostDataType = {\r\n    id: number\r\n    message: string\r\n    value: number\r\n}\r\nexport type ProfilePageType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nexport type StateType = {\r\n    dialogsPage: DialogsPageType\r\n    profilePage: ProfilePageType\r\n\r\n}\r\n\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    subscribe: (callback: (state: StateType) => void) => void\r\n    _rerenderEntireTree: (state: StateType) => void\r\n    getState: () => StateType\r\n    dispatch: (action: AddPostActiveType | UpdatePostType | UpdateMessageType | SendMessageType) => void\r\n}\r\nexport type AddPostActiveType = {\r\n    type: 'ADD-POST'\r\n    postText: string\r\n}\r\n\r\nexport type UpdatePostType = {\r\n    type: 'UPDATE-NEW-POST-TEXT'\r\n    newPostText: string\r\n}\r\n\r\nexport type UpdateMessageType = {\r\n    type: \"UPDATE-NEW-MESSAGE-BODY\"\r\n    body: string\r\n}\r\n\r\nexport type SendMessageType = {\r\n    type: \"SEND-MESSAGE\"\r\n\r\n\r\n}\r\n\r\nexport const store: StoreType = {\r\n    _state: {\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {id: 1, name: 'Alex'},\r\n                {id: 2, name: 'Olga'},\r\n                {id: 3, name: 'Dima'},\r\n                {id: 4, name: 'Sveta'},\r\n            ],\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'How are you'},\r\n                {id: 3, message: 'It-incubator'},\r\n                {id: 4, message: 'it-kamasutra'},\r\n            ],\r\n            newMessageBody: ''\r\n        },\r\n        profilePage: {\r\n\r\n            postData: [\r\n                {id: 1, message: \"Hi, how are you?\", value: 10},\r\n                {id: 2, message: \"It's my first post\", value: 8},\r\n                {id: 3, message: \"Yo it-incubator\", value: 10},\r\n                {id: 4, message: \"Yo\", value: 17},\r\n            ],\r\n            newPostText: ''\r\n\r\n        }\r\n    },\r\n    subscribe(callback: (state: StateType) => void) {\r\n        this._rerenderEntireTree = callback\r\n    },\r\n    _rerenderEntireTree(_state: StateType) {\r\n        console.log('Rerender')\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    dispatch(action) {\r\n        if (action.type === 'ADD-POST') {\r\n            let newPost: PostDataType = {\r\n                id: 5,\r\n                message: action.postText,\r\n                value: 0\r\n            }\r\n            this._state.profilePage.postData.push(newPost)\r\n            this._rerenderEntireTree(this._state);\r\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n            this._state.profilePage.newPostText = action.newPostText\r\n            this._rerenderEntireTree(this._state);\r\n        } else if (action.type === 'UPDATE-NEW-MESSAGE-BODY') {\r\n            this._state.dialogsPage.newMessageBody = action.body\r\n            this._rerenderEntireTree(this._state);\r\n        } else if (action.type === 'SEND-MESSAGE') {\r\n            let body = this._state.dialogsPage.newMessageBody\r\n            this._state.dialogsPage.newMessageBody = ''\r\n            this._state.dialogsPage.messages.push({id: 5, message: body})\r\n            this._rerenderEntireTree(this._state);\r\n        }\r\n    }\r\n}\r\nexport const addPostAC = (postText: string): AddPostActiveType => {\r\n    return {\r\n        type: \"ADD-POST\",\r\n        postText: postText\r\n    }\r\n}\r\n\r\nexport const onPostChangeAC = (newPostText: string): UpdatePostType => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST-TEXT',\r\n        newPostText: newPostText\r\n    }\r\n}\r\nexport const sendMessageAC = (): SendMessageType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n    }\r\n}\r\n\r\nexport const updateNewMessageBodyAC = (text: string):UpdateMessageType => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE-BODY',\r\n        body: text\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://wallpaperforu.com/wp-content/uploads/2020/08/vector-wallpaper-200827150908131024x768.jpg\" alt=\"logo\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './Navbar.module.css';\r\n\r\n// let classes = {\r\n//     'nav': 'Navbar_nav__3--CE',\r\n//     'item': 'Navbar_item__3QZOK'\r\n// }\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/messages\" activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype propsPost = {\r\n    message: string\r\n    value: number\r\n}\r\n\r\nconst Post = (props: propsPost) => {\r\n\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://psn100.net/img/avatar/2e48ef2b3fde68e5e8b24e1c7c7ca1ca.png\"/>\r\n            <div>{props.message}</div>\r\n            <div>\r\n            <span>like {props.value}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from \"react\";\r\nimport Post from \"./Posts/Post\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {addPostAC, AddPostActiveType, onPostChangeAC, UpdatePostType} from \"../../../Redux/State\";\r\n\r\nexport type typeMyPostProps = {\r\n    postData: Array<typePostData>\r\n    newPostText: string\r\n    dispatch: (action: AddPostActiveType | UpdatePostType) => void\r\n   /* addPost: (m: string) => void*/\r\n    /*updateNewPostText: (newPostText: string) => void*/\r\n}\r\n\r\nexport type typePostData = {\r\n    id: number\r\n    message: string\r\n    value: number\r\n}\r\n\r\n\r\n\r\nconst MyPosts = (props: typeMyPostProps) => {\r\n    let postElements =\r\n        props.postData.map(p => <Post message={p.message} value={p.value}/>)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n\r\n    let addPost = () => {\r\n        //let text = newPostElement.current ? newPostElement.current.value : '----'\r\n        //let text = newPostElement.current.value\r\n        if(newPostElement.current) {\r\n            props.dispatch(addPostAC(newPostElement.current.value)  )\r\n            props.dispatch(onPostChangeAC(''))\r\n        }\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        //let text = newPostElement.current ? newPostElement.current.value : '----'\r\n        if (newPostElement.current) {\r\n            props.dispatch(onPostChangeAC(newPostElement.current.value))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.description}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <div>\r\n                <textarea onChange={onPostChange}\r\n                          ref={newPostElement}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={addPost}>Add post</button>\r\n            </div>\r\n            <div className={s.posts}>\r\n                <h3>New post</h3>\r\n            </div>\r\n            {postElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div className={s.content}>\r\n                <img\r\n                    src=\"https://cdn.shazoo.ru/c800x360/258912_Jv7rCOP3Rs_kratos_3_wallpaper_1600x900.jpg\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + descproption\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport MyPosts, {typePostData} from \"./Myposts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {AddPostActiveType, PostDataType, store, UpdatePostType} from \"../../Redux/State\";\r\n\r\ntype ProfilePropsType ={\r\n    posts: PostDataType[]\r\n    /*addPost: (postText: string) => void*/\r\n    newPostText: string\r\n    /*updateNewPostText: (newPostText: string) => void*/\r\n    dispatch: (action: AddPostActiveType | UpdatePostType) => void\r\n}\r\nconst Profile = (props:ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts postData={props.posts}\r\n                     dispatch={store.dispatch.bind(store)}\r\n                     /*addPost={props.addPost}*/\r\n                     newPostText={props.newPostText}\r\n                     /*updateNewPostText={props.updateNewPostText}*//>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './DialogsItem.module.css'\r\n\r\n\r\nexport type DialogsItemProps ={\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = (props: DialogsItemProps) => {\r\n    return (\r\n\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/messages/\" + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport s from './MessageProps.module.css'\r\n\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst MessageProps = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageProps;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport MessageProps from \"./MessageProps/MessageProps\";\r\nimport {sendMessageAC, StoreType, updateNewMessageBodyAC} from \"../../../Redux/State\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogsType>\r\n    store: StoreType\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) =>{\r\n\r\n    const state = props.store.getState().dialogsPage\r\n\r\n    let dialogsElement = props.dialogs.map( d => <DialogsItem name={d.name} id={d.id}/> )\r\n    let messegesElement = props.messages.map( m => <MessageProps message={m.message}/> )\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageAC())\r\n    }\r\n    let onNewMessageChange = (e: any) => {\r\n        let body = e.target.value\r\n        props.store.dispatch(updateNewMessageBodyAC(body))\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messegesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder={\"Введите текст\"}/></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst Music = () =>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst Settings = () =>{\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nconst News = () =>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Profile/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Music from \"./components/Profile/Music/Music\";\nimport Settings from \"./components/Profile/Settings/Settings\";\nimport News from \"./components/Profile/News/News\";\nimport {\n    AddPostActiveType,\n    SendMessageType,\n    StateType,\n    store,\n    StoreType,\n    UpdateMessageType,\n    UpdatePostType\n} from \"./Redux/State\";\n\n// asdgit add\ntype AppPropsType ={\n    state: StateType\n    dispatch: (action: AddPostActiveType | UpdatePostType | UpdateMessageType | SendMessageType) => void\n    store: StoreType\n\n /*   addPost: (m: string) => void\n    updateNewPostText: (newPostText: string) => void*/\n}\n\n\nfunction App(props: AppPropsType) {\n    let posts = props.state.profilePage.postData\n    let dialogs = props.state.dialogsPage.dialogs\n    let messages = props.state.dialogsPage.messages\n    let profilePage = props.state.profilePage.newPostText\n\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile\" render={ () => <Profile posts={posts}\n                                                                   dispatch={store.dispatch.bind(store)}\n                                                                   /*addPost={props.addPost}*/\n                                                                   newPostText={props.state.profilePage.newPostText}\n                                                                   /*updateNewPostText={props.updateNewPostText}*/\n\n\n                    /> }/>\n                    <Route path=\"/messages\" render={ () => <Dialogs dialogs={dialogs}\n                                                                    store={props.store}\n                                                                    messages={messages} /> }/>\n                    <Route path=\"/music\" render={ () => <Music /> }/>\n                    <Route path=\"/settings\" render={ () => <Settings /> }/>\n                    <Route path=\"/news\" render={ () => <News /> }/>\n                </div>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import reportWebVitals from './reportWebVitals';\nimport {StateType, store,} from \"./Redux/State\";\nimport React from \"react\";\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\n\nexport let rerenderEntireTree = (state: StateType) =>{\n    ReactDOM.render(\n        <React.StrictMode>\n            <App state={store.getState()}\n                 dispatch={store.dispatch.bind(store)}\n                 store={store}\n            />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\nrerenderEntireTree(store.getState())\n\nstore.subscribe(rerenderEntireTree)\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}